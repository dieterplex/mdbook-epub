# Based on starship's workflows
name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: short

jobs:
  rustfmt:
    name: Rustfmt [Formatter]
    runs-on: ubuntu-latest
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v3

      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Build | Format
        run: cargo fmt --all -- --check

  clippy:
    name: Clippy [Linter]
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v3

      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Setup | Cache
        uses: Swatinem/rust-cache@v2

      - name: Build | Lint
        run: cargo clippy --workspace --locked --all-targets --all-features -- -D warnings

  cargo_check:
    name: Compile
    runs-on: ubuntu-latest
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v3

      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup | Cache
        uses: Swatinem/rust-cache@v2

      - name: Build | Check
        run: cargo check --workspace --locked

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    needs: cargo_check # First check then run expansive tests
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        rust: [stable, nightly]
        include:
          - os: windows-latest
            rustflags: -C target-feature=+crt-static
    env:
      RUSTFLAGS: ${{ matrix.rustflags || '' }}
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v3

      - name: Setup | Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: llvm-tools-preview

      - name: Setup | Cache
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Install epubcheck (Linux or macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
                sudo apt install epubcheck
          elif [ "$RUNNER_OS" == "macOS" ]; then
                brew update
                brew install epubcheck
          else
                echo "$RUNNER_OS not supported"
                exit 1
          fi

      - name: Install epubcheck (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install epubcheck

          # Propagate jar path by env var to .bat
          $epubcheck_version = $(choco list -r epubcheck).Split("|")[1]
          $epubcheck_path = "C:\ProgramData\Chocolatey\lib\epubcheck\tools\epubcheck-$epubcheck_version"
          echo "EPUBCHECK=$epubcheck_path" | Out-File -FilePath "$env:GITHUB_ENV" -Append

          # Add .bat to PATH
          echo "$env:GITHUB_WORKSPACE\ci" | Out-File -FilePath "$env:GITHUB_PATH" -Append

      # - name: debug in Windows runner
      #   if: runner.os == 'Windows'
      #   uses: fawazahmed0/action-debug-vscode@main

      - name: Build | Test
        run: "cargo llvm-cov
          --all-features
          --locked
          --workspace
          --lcov --output-path lcov.info
          -- --include-ignored"
        env:
          # Avoid -D warnings on nightly builds
          RUSTFLAGS: ""

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: github.repository == 'dieterplex/mdbook-epub'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
